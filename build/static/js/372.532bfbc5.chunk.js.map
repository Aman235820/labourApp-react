{"version":3,"file":"static/js/372.532bfbc5.chunk.js","mappings":"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","sources":["components/Register.js","services/userService.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Form, Button, Container, Row, Col, Card, Spinner, InputGroup } from 'react-bootstrap';\r\nimport { useForm } from 'react-hook-form';\r\nimport { registerUser, requestOTP } from '../services/userService';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { FaUser, FaEnvelope, FaPhone, FaKey, FaEye, FaEyeSlash, FaArrowRight, FaExclamationCircle, FaCheckCircle } from 'react-icons/fa';\r\n\r\nconst Register = () => {\r\n    const { register, handleSubmit, formState: { errors }, getValues } = useForm();\r\n    const navigate = useNavigate();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [otpStatus, setOtpStatus] = useState('');\r\n    const [otpLoading, setOtpLoading] = useState(false);\r\n    const [showOtp, setShowOtp] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (error) {\r\n            const timer = setTimeout(() => setError(''), 2000);\r\n            return () => clearTimeout(timer);\r\n        }\r\n    }, [error]);\r\n\r\n    useEffect(() => {\r\n        if (otpStatus && otpStatus.toLowerCase().includes('success')) {\r\n            const timer = setTimeout(() => setOtpStatus(''), 2000);\r\n            return () => clearTimeout(timer);\r\n        }\r\n    }, [otpStatus]);\r\n\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            setIsLoading(true);\r\n            setError('');\r\n            const { otp, ...userData } = data;\r\n            const response = await registerUser(userData, otp);\r\n            if (response.token && response.returnValue) {\r\n                localStorage.setItem('user', JSON.stringify({ ...response.returnValue, token: response.token }));\r\n                navigate('/userHome');\r\n            } else {\r\n                setError('Registration failed. Please try again.');\r\n            }\r\n        } catch (error) {\r\n            console.error('Registration failed:', error);\r\n            setError(error.message || 'Registration failed. Please try again.');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleRequestOTP = async () => {\r\n        setOtpStatus('');\r\n        setOtpLoading(true);\r\n        const mobile = getValues('mobileNumber');\r\n        if (!mobile || !/^[0-9]{10}$/.test(mobile)) {\r\n            setOtpStatus('Please enter a valid 10-digit mobile number before requesting OTP.');\r\n            setOtpLoading(false);\r\n            return;\r\n        }\r\n        try {\r\n            await requestOTP(mobile, 'USER');\r\n            setOtpStatus('OTP sent successfully!');\r\n        } catch (err) {\r\n            setOtpStatus(err.message || 'Failed to send OTP.');\r\n        } finally {\r\n            setOtpLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container className=\"mt-5 mb-5\">\r\n            <Row className=\"justify-content-center\">\r\n                <Col md={8} lg={6}>\r\n                    <Card className=\"shadow-lg border-0\">\r\n                        <Card.Body className=\"p-5\">\r\n                            <div className=\"text-center mb-4\">\r\n                                <h2 className=\"fw-bold text-primary\">Create Account</h2>\r\n                                <p className=\"text-muted\">Join InstaLab and connect with skilled professionals</p>\r\n                            </div>\r\n                            \r\n                            {error && (\r\n                                <div className=\"alert alert-danger d-flex align-items-center\" role=\"alert\">\r\n                                    <FaExclamationCircle className=\"me-2\" />\r\n                                    {error}\r\n                                </div>\r\n                            )}\r\n\r\n                            <Form onSubmit={handleSubmit(onSubmit)}>\r\n                                <Form.Group className=\"mb-4\">\r\n                                    <div className=\"d-flex align-items-center\">\r\n                                        <FaUser className=\"me-2\" />\r\n                                        <Form.Label className=\"fw-bold mb-0\">Full Name</Form.Label>\r\n                                    </div>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        placeholder=\"Enter your full name\"\r\n                                        className={`form-control-lg ${errors.fullName ? 'is-invalid' : ''}`}\r\n                                        {...register('fullName', { \r\n                                            required: 'Full name is required',\r\n                                            minLength: {\r\n                                                value: 3,\r\n                                                message: 'Name must be at least 3 characters'\r\n                                            }\r\n                                        })}\r\n                                    />\r\n                                    {errors.fullName && (\r\n                                        <Form.Text className=\"text-danger\">\r\n                                            {errors.fullName.message}\r\n                                        </Form.Text>\r\n                                    )}\r\n                                </Form.Group>\r\n\r\n                                <Form.Group className=\"mb-4\">\r\n                                    <div className=\"d-flex align-items-center\">\r\n                                        <FaEnvelope className=\"me-2\" />\r\n                                        <Form.Label className=\"fw-bold mb-0\">Email Address</Form.Label>\r\n                                    </div>\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        placeholder=\"Enter your email\"\r\n                                        className={`form-control-lg ${errors.email ? 'is-invalid' : ''}`}\r\n                                        {...register('email', {\r\n                                            required: 'Email is required',\r\n                                            pattern: {\r\n                                                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                                                message: 'Please enter a valid email address'\r\n                                            }\r\n                                        })}\r\n                                    />\r\n                                    {errors.email && (\r\n                                        <Form.Text className=\"text-danger\">\r\n                                            {errors.email.message}\r\n                                        </Form.Text>\r\n                                    )}\r\n                                </Form.Group>\r\n\r\n                                <Form.Group className=\"mb-4\">\r\n                                    <div className=\"d-flex align-items-center\">\r\n                                        <FaPhone className=\"me-2\" />\r\n                                        <Form.Label className=\"fw-bold mb-0\">Mobile Number</Form.Label>\r\n                                    </div>\r\n                                    <InputGroup>\r\n                                        <Form.Control\r\n                                            type=\"tel\"\r\n                                            placeholder=\"Enter your mobile number\"\r\n                                            className={`form-control-lg ${errors.mobileNumber ? 'is-invalid' : ''}`}\r\n                                            {...register('mobileNumber', {\r\n                                                required: 'Mobile number is required',\r\n                                                pattern: {\r\n                                                    value: /^[0-9]{10}$/,\r\n                                                    message: 'Please enter a valid 10-digit mobile number'\r\n                                                },\r\n                                                onChange: (e) => {\r\n                                                    const value = e.target.value.replace(/\\D/g, '').slice(0, 10);\r\n                                                    e.target.value = value;\r\n                                                }\r\n                                            })}\r\n                                            maxLength=\"10\"\r\n                                        />\r\n                                        <Button\r\n                                            variant=\"outline-primary\"\r\n                                            type=\"button\"\r\n                                            onClick={handleRequestOTP}\r\n                                            disabled={otpLoading}\r\n                                        >\r\n                                            {otpLoading ? 'Sending OTP...' : 'Request OTP'}\r\n                                        </Button>\r\n                                    </InputGroup>\r\n                                    {errors.mobileNumber && (\r\n                                        <Form.Text className=\"text-danger\">\r\n                                            {errors.mobileNumber.message}\r\n                                        </Form.Text>\r\n                                    )}\r\n                                    {otpStatus && (\r\n                                        <Form.Text className={otpStatus.includes('success') ? 'text-success' : 'text-danger'}>\r\n                                            {otpStatus}\r\n                                        </Form.Text>\r\n                                    )}\r\n                                </Form.Group>\r\n\r\n                                <Form.Group className=\"mb-4\">\r\n                                    <div className=\"d-flex align-items-center\">\r\n                                        <FaKey className=\"me-2\" />\r\n                                        <Form.Label className=\"fw-bold mb-0\">OTP</Form.Label>\r\n                                    </div>\r\n                                    <InputGroup>\r\n                                        <Form.Control\r\n                                            type={showOtp ? \"text\" : \"password\"}\r\n                                            placeholder=\"Enter OTP\"\r\n                                            className={`form-control-lg ${errors.otp ? 'is-invalid' : ''}`}\r\n                                            {...register('otp', {\r\n                                                required: 'OTP is required',\r\n                                                pattern: {\r\n                                                    value: /^[0-9]{4,6}$/,\r\n                                                    message: 'Please enter a valid 4 to 6-digit OTP'\r\n                                                }\r\n                                            })}\r\n                                            maxLength=\"6\"\r\n                                        />\r\n                                        <Button\r\n                                            variant=\"outline-secondary\"\r\n                                            type=\"button\"\r\n                                            onClick={() => setShowOtp(v => !v)}\r\n                                            tabIndex={-1}\r\n                                        >\r\n                                            {showOtp ? <FaEyeSlash /> : <FaEye />}\r\n                                        </Button>\r\n                                    </InputGroup>\r\n                                    {errors.otp && (\r\n                                        <Form.Text className=\"text-danger\">\r\n                                            {errors.otp.message}\r\n                                        </Form.Text>\r\n                                    )}\r\n                                </Form.Group>\r\n\r\n                                <div className=\"d-grid gap-2\">\r\n                                    <Button \r\n                                        variant=\"primary\" \r\n                                        type=\"submit\" \r\n                                        className=\"btn-lg fw-bold d-flex align-items-center justify-content-center\"\r\n                                        disabled={isLoading}\r\n                                    >\r\n                                        {isLoading ? (\r\n                                            <>\r\n                                                <Spinner\r\n                                                    as=\"span\"\r\n                                                    animation=\"border\"\r\n                                                    size=\"sm\"\r\n                                                    role=\"status\"\r\n                                                    aria-hidden=\"true\"\r\n                                                    className=\"me-2\"\r\n                                                />\r\n                                                Creating Account...\r\n                                            </>\r\n                                        ) : (\r\n                                            <>\r\n                                                Create Account <FaArrowRight className=\"ms-2\" />\r\n                                            </>\r\n                                        )}\r\n                                    </Button>\r\n                                </div>\r\n\r\n                                <div className=\"text-center mt-4\">\r\n                                    <p className=\"mb-0\">\r\n                                        Already have an account?{' '}\r\n                                        <Button \r\n                                            variant=\"link\" \r\n                                            className=\"p-0 text-decoration-none\"\r\n                                            onClick={() => navigate('/login')}\r\n                                        >\r\n                                            Login here\r\n                                        </Button>\r\n                                    </p>\r\n                                </div>\r\n                            </Form>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Register; ","import axios from 'axios';\r\n\r\nconst appUrl = process.env.REACT_APP_API_BASEURL;\r\nconst baseurl = `${appUrl}/labourapp`;\r\n\r\nexport const registerUser = async (userData, otp) => {\r\n    try {\r\n        const endpoint = `${baseurl}/auth/registerUser?otp=${otp}`;\r\n        const response = await axios.post(endpoint, userData, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            withCredentials: true\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        throw error.response?.data || error.message;\r\n    }\r\n};\r\n\r\nexport const loginUser = async ({ mobileNumber, otp }) => {\r\n    try {\r\n        const endpoint = `${baseurl}/auth/userLogin?otp=${otp}`;\r\n        const response = await axios.post(endpoint, { mobileNumber }, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            withCredentials: true\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        throw error.response?.data || error.message;\r\n    }\r\n};\r\n\r\nexport const requestOTP = async (mobile, role) => {\r\n    try {\r\n        const endpoint = `${baseurl}/auth/requestOTP`;\r\n        const response = await axios.post(endpoint, { mobile, role }, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            withCredentials: true\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        throw error.response?.data || error.message;\r\n    }\r\n};\r\n\r\nexport const deleteUser = async (userId) => {\r\n    try {\r\n        const endpoint = `${baseurl}/admin/removeUser/${userId}`;\r\n        const response = await axios.delete(endpoint, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            withCredentials: true\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        throw error.response?.data || error.message;\r\n    }\r\n}; "],"names":["Register","register","handleSubmit","formState","errors","getValues","useForm","navigate","useNavigate","isLoading","setIsLoading","useState","error","setError","otpStatus","setOtpStatus","otpLoading","setOtpLoading","showOtp","setShowOtp","useEffect","timer","setTimeout","clearTimeout","toLowerCase","includes","_jsx","Container","className","children","Row","Col","md","lg","Card","_jsxs","Body","role","FaExclamationCircle","Form","onSubmit","async","otp","data","userData","_objectWithoutProperties","_excluded","response","registerUser","token","returnValue","localStorage","setItem","JSON","stringify","_objectSpread","console","message","Group","FaUser","Label","Control","type","placeholder","concat","fullName","required","minLength","value","Text","FaEnvelope","email","pattern","FaPhone","InputGroup","mobileNumber","onChange","e","target","replace","slice","maxLength","Button","variant","onClick","mobile","test","requestOTP","err","disabled","FaKey","v","tabIndex","FaEyeSlash","FaEye","_Fragment","Spinner","as","animation","size","FaArrowRight","baseurl","process","endpoint","axios","post","headers","withCredentials","_error$response","loginUser","_ref","_error$response2","_error$response3","deleteUser","userId","delete","_error$response4"],"sourceRoot":""}