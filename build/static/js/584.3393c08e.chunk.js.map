{"version":3,"file":"static/js/584.3393c08e.chunk.js","mappings":"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","sources":["services/userService.js","components/Login.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst appUrl = process.env.REACT_APP_API_BASEURL;\r\nconst baseurl = `${appUrl}/labourapp`;\r\n\r\nexport const registerUser = async (userData, otp) => {\r\n    try {\r\n        const endpoint = `${baseurl}/auth/registerUser?otp=${otp}`;\r\n        const response = await axios.post(endpoint, userData, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            withCredentials: true\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        throw error.response?.data || error.message;\r\n    }\r\n};\r\n\r\nexport const loginUser = async ({ mobileNumber, otp }) => {\r\n    try {\r\n        const endpoint = `${baseurl}/auth/userLogin?otp=${otp}`;\r\n        const response = await axios.post(endpoint, { mobileNumber }, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            withCredentials: true\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        throw error.response?.data || error.message;\r\n    }\r\n};\r\n\r\nexport const requestOTP = async (mobile, role) => {\r\n    try {\r\n        const endpoint = `${baseurl}/auth/requestOTP`;\r\n        const response = await axios.post(endpoint, { mobile, role }, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            withCredentials: true\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        throw error.response?.data || error.message;\r\n    }\r\n};\r\n\r\nexport const deleteUser = async (userId) => {\r\n    try {\r\n        const endpoint = `${baseurl}/admin/removeUser/${userId}`;\r\n        const response = await axios.delete(endpoint, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json'\r\n            },\r\n            withCredentials: true\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        throw error.response?.data || error.message;\r\n    }\r\n}; ","import React, { useState, useEffect } from 'react';\r\nimport { Form, Button, Container, Row, Col, Card, Spinner, InputGroup } from 'react-bootstrap';\r\nimport { useForm } from 'react-hook-form';\r\nimport { loginUser, requestOTP } from '../services/userService';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { FaPhone, FaKey, FaEye, FaEyeSlash, FaArrowRight, FaExclamationCircle, FaCheckCircle } from 'react-icons/fa';\r\n\r\nconst Login = () => {\r\n    const { register, handleSubmit, formState: { errors }, getValues } = useForm();\r\n    const navigate = useNavigate();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [otpStatus, setOtpStatus] = useState('');\r\n    const [otpLoading, setOtpLoading] = useState(false);\r\n    const [showOtp, setShowOtp] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (error) {\r\n            const timer = setTimeout(() => setError(''), 2000);\r\n            return () => clearTimeout(timer);\r\n        }\r\n    }, [error]);\r\n\r\n    useEffect(() => {\r\n        if (otpStatus && otpStatus.toLowerCase().includes('success')) {\r\n            const timer = setTimeout(() => setOtpStatus(''), 2000);\r\n            return () => clearTimeout(timer);\r\n        }\r\n    }, [otpStatus]);\r\n\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            setIsLoading(true);\r\n            setError('');\r\n            const response = await loginUser({ mobileNumber: data.mobileNumber, otp: data.otp });\r\n            if (response.token && response.returnValue) {\r\n                localStorage.setItem('user', JSON.stringify({ ...response.returnValue, token: response.token }));\r\n                \r\n                // Dispatch custom event to notify sidebar about login status change\r\n                window.dispatchEvent(new Event('userLoginStatusChanged'));\r\n                \r\n                navigate('/userHome');\r\n            } else {\r\n                setError('Login failed. Please try again.');\r\n            }\r\n        } catch (error) {\r\n            setError(error.message || 'Login failed. Please try again.');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleRequestOTP = async () => {\r\n        setOtpStatus('');\r\n        setOtpLoading(true);\r\n        const mobile = getValues('mobileNumber');\r\n        if (!mobile || !/^[0-9]{10}$/.test(mobile)) {\r\n            setOtpStatus('Please enter a valid 10-digit mobile number before requesting OTP.');\r\n            setOtpLoading(false);\r\n            return;\r\n        }\r\n        try {\r\n            await requestOTP(mobile, 'USER');\r\n            setOtpStatus('OTP sent successfully!');\r\n        } catch (err) {\r\n            setOtpStatus(err.message || 'Failed to send OTP.');\r\n        } finally {\r\n            setOtpLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container className=\"mt-5 mb-5\">\r\n            <Row className=\"justify-content-center\">\r\n                <Col md={8} lg={6}>\r\n                    <Card className=\"shadow-lg border-0\">\r\n                        <Card.Body className=\"p-5\">\r\n                            <div className=\"text-center mb-4\">\r\n                                <h2 className=\"fw-bold text-primary\">Welcome Back</h2>\r\n                                <p className=\"text-muted\">Sign in to continue to InstaLab</p>\r\n                            </div>\r\n\r\n                            {error && (\r\n                                <div className=\"alert alert-danger d-flex align-items-center\" role=\"alert\">\r\n                                    <FaExclamationCircle className=\"me-2\" />\r\n                                    {error}\r\n                                </div>\r\n                            )}\r\n\r\n                            <Form onSubmit={handleSubmit(onSubmit)}>\r\n                                <Form.Group className=\"mb-4\">\r\n                                    <div className=\"d-flex align-items-center\">\r\n                                        <FaPhone className=\"me-2\" />\r\n                                        <Form.Label className=\"fw-bold mb-0\">Mobile Number</Form.Label>\r\n                                    </div>\r\n                                    <InputGroup>\r\n                                        <Form.Control\r\n                                            type=\"tel\"\r\n                                            placeholder=\"Enter your mobile number\"\r\n                                            className={`form-control-lg ${errors.mobileNumber ? 'is-invalid' : ''}`}\r\n                                            {...register('mobileNumber', {\r\n                                                required: 'Mobile number is required',\r\n                                                pattern: {\r\n                                                    value: /^[0-9]{10}$/,\r\n                                                    message: 'Please enter a valid 10-digit mobile number'\r\n                                                },\r\n                                                onChange: (e) => {\r\n                                                    const value = e.target.value.replace(/\\D/g, '').slice(0, 10);\r\n                                                    e.target.value = value;\r\n                                                }\r\n                                            })}\r\n                                            maxLength=\"10\"\r\n                                        />\r\n                                        <Button\r\n                                            variant=\"outline-primary\"\r\n                                            type=\"button\"\r\n                                            onClick={handleRequestOTP}\r\n                                            disabled={otpLoading}\r\n                                        >\r\n                                            {otpLoading ? 'Sending OTP...' : 'Request OTP'}\r\n                                        </Button>\r\n                                    </InputGroup>\r\n                                    {errors.mobileNumber && (\r\n                                        <Form.Text className=\"text-danger\">\r\n                                            {errors.mobileNumber.message}\r\n                                        </Form.Text>\r\n                                    )}\r\n                                    {otpStatus && (\r\n                                        <Form.Text className={otpStatus.includes('success') ? 'text-success' : 'text-danger'}>\r\n                                            {otpStatus}\r\n                                        </Form.Text>\r\n                                    )}\r\n                                </Form.Group>\r\n\r\n                                <Form.Group className=\"mb-4\">\r\n                                    <div className=\"d-flex align-items-center\">\r\n                                        <FaKey className=\"me-2\" />\r\n                                        <Form.Label className=\"fw-bold mb-0\">OTP</Form.Label>\r\n                                    </div>\r\n                                    <InputGroup>\r\n                                        <Form.Control\r\n                                            type={showOtp ? \"text\" : \"password\"}\r\n                                            placeholder=\"Enter OTP\"\r\n                                            className={`form-control-lg ${errors.otp ? 'is-invalid' : ''}`}\r\n                                            {...register('otp', {\r\n                                                required: 'OTP is required',\r\n                                                pattern: {\r\n                                                    value: /^[0-9]{4,6}$/,\r\n                                                    message: 'Please enter a valid 4 to 6-digit OTP'\r\n                                                }\r\n                                            })}\r\n                                            maxLength=\"6\"\r\n                                        />\r\n                                        <Button\r\n                                            variant=\"outline-secondary\"\r\n                                            type=\"button\"\r\n                                            onClick={() => setShowOtp(v => !v)}\r\n                                            tabIndex={-1}\r\n                                        >\r\n                                            {showOtp ? <FaEyeSlash /> : <FaEye />}\r\n                                        </Button>\r\n                                    </InputGroup>\r\n                                    {errors.otp && (\r\n                                        <Form.Text className=\"text-danger\">\r\n                                            {errors.otp.message}\r\n                                        </Form.Text>\r\n                                    )}\r\n                                </Form.Group>\r\n\r\n                                <div className=\"d-grid gap-2\">\r\n                                    <Button\r\n                                        variant=\"primary\"\r\n                                        type=\"submit\"\r\n                                        className=\"btn-lg fw-bold d-flex align-items-center justify-content-center\"\r\n                                        disabled={isLoading}\r\n                                    >\r\n                                        {isLoading ? (\r\n                                            <>\r\n                                                <Spinner\r\n                                                    as=\"span\"\r\n                                                    animation=\"border\"\r\n                                                    size=\"sm\"\r\n                                                    role=\"status\"\r\n                                                    aria-hidden=\"true\"\r\n                                                    className=\"me-2\"\r\n                                                />\r\n                                                Signing In...\r\n                                            </>\r\n                                        ) : (\r\n                                            <>\r\n                                                Sign In <FaArrowRight className=\"ms-2\" />\r\n                                            </>\r\n                                        )}\r\n                                    </Button>\r\n                                </div>\r\n\r\n                                <div className=\"text-center mt-4\">\r\n                                    <p className=\"mb-0\">\r\n                                        Don't have an account?{' '}\r\n                                        <Button\r\n                                            variant=\"link\"\r\n                                            className=\"p-0 text-decoration-none\"\r\n                                            onClick={() => navigate('/register')}\r\n                                        >\r\n                                            Register here\r\n                                        </Button>\r\n                                    </p>\r\n                                </div>\r\n                            </Form>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Login; "],"names":["baseurl","concat","process","registerUser","async","userData","otp","endpoint","axios","post","headers","withCredentials","data","error","_error$response","response","message","loginUser","mobileNumber","_ref","_error$response2","requestOTP","mobile","role","_error$response3","deleteUser","userId","delete","_error$response4","Login","register","handleSubmit","formState","errors","getValues","useForm","navigate","useNavigate","isLoading","setIsLoading","useState","setError","otpStatus","setOtpStatus","otpLoading","setOtpLoading","showOtp","setShowOtp","useEffect","timer","setTimeout","clearTimeout","toLowerCase","includes","_jsx","Container","className","children","Row","Col","md","lg","Card","_jsxs","Body","FaExclamationCircle","Form","onSubmit","token","returnValue","localStorage","setItem","JSON","stringify","_objectSpread","window","dispatchEvent","Event","Group","FaPhone","Label","InputGroup","Control","type","placeholder","required","pattern","value","onChange","e","target","replace","slice","maxLength","Button","variant","onClick","test","err","disabled","Text","FaKey","v","tabIndex","FaEyeSlash","FaEye","_Fragment","Spinner","as","animation","size","FaArrowRight"],"sourceRoot":""}